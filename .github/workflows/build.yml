
      #########.
     ########",#:
   #########',##".
  ##'##'## .##',##.
   ## ## ## # ##",#.
    ## ## ## ## ##'
     ## ## ## :##
      ## ## ##."

name: Build

on: [push]

jobs:
  #
  # Install
  #
  install:
    name: Install
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node modules
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}

      - run: yarn install
      - run: yarn lerna bootstrap

  #
  # Test
  #
  test:
    name: Test
    needs: install
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]
        package: [kube-header]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Load node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}

      - run: yarn workspace ${{ matrix.package }} test

  #
  # Build
  #
  build:
    name: Build
    needs: install
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Load node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}

      - run: yarn lerna run build

      - name: Persist dist
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.node-version }}-dist
          path: packages/*/dist

  #
  # Publish on NPM
  #
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        # Publish only build from Node 12.x
        node-version: [12.x]
        package: [kube-header]

    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get version in current branch
        id: branch-version
        run: echo "##[set-output name=value;]$(jq -r .version packages/${{ matrix.package }}/package.json)"

      - name: Check if version exists on NPM
        id: npm-version
        run: echo "##[set-output name=value;]$(npm view ${{ matrix.package }}@${{ steps.branch-version.outputs.value }} version)"

      - name: Version update detected
        if: steps.npm-version.outputs.value != steps.branch-version.outputs.value
        run: 'echo "Version update found:\n  Current: ${{ steps.npm-version.outputs.value }}\n  New: ${{ steps.branch-version.outputs.value }}"'

      - name: Load dist
        if: steps.npm-version.outputs.value != steps.branch-version.outputs.value
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.node-version }}-dist
          path: packages/

      - name: Publish package to NPM
        if: steps.npm-version.outputs.value != steps.branch-version.outputs.value
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        working-directory: packages/${{ matrix.package }}
        run: |
          npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN
          npm config set scope "<@OWNER>"
          npm config list
          npm publish --access public

  #
  # Publish on VSCode Marketplace
  #
  publish-vscode:
    name: Publish to VSCode Marketplace
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        # Publish only build from Node 12.x
        node-version: [12.x]
        package: [vscode-kube-header]

    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get version in current branch
        id: branch-version
        run: echo "##[set-output name=value;]$(jq -r .version packages/${{ matrix.package }}/package.json)"

      - name: Check if version exists on VSCode Marketplace
        id: marketplace-version
        run: echo "##[set-output name=value;]$(npx vsce show --json kube.${{ matrix.package }} | jq -r .versions[0].version)"

      - name: Version update detected
        if: steps.marketplace-version.outputs.value != steps.branch-version.outputs.value
        run: 'echo "Version update found:\n  Current: ${{ steps.marketplace-version.outputs.value }}.\n  New: ${{ steps.branch-version.outputs.value }}"'

      - name: Load dist
        if: steps.marketplace-version.outputs.value != steps.branch-version.outputs.value
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.node-version }}-dist
          path: packages/

      - name: Publish package to VSCode Marketplace
        if: steps.marketplace-version.outputs.value != steps.branch-version.outputs.value
        env:
          VSCODE_AUTH_TOKEN: ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}
        working-directory: packages/${{ matrix.package }}
        run: npx vsce publish --yarn -p $VSCODE_AUTH_TOKEN
